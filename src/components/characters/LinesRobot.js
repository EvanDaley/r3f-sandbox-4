/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo } from 'react'
import {Box, useGLTF, useTexture} from '@react-three/drei'
import * as THREE from 'three'
import { useFrame } from "@react-three/fiber"

const filePath = window.location.href + '/models/Robot.glb'

export default function LinesRobot(props) {
  const texture = useTexture(window.location.href + '/images/textures/flakes.png')

  const materialProps = {
    clearcoat: 1.0,
    clearcoatRoughness: 0,
    metalness: 0.0,
    roughness: 0.02,
    color: 'teal',
    transmission: 0.7,     // strong glass effect
    thickness: 0.4,        // depth of glass
    ior: 1.5,              // index of refraction
    attenuationColor: "#16419f",
    attenuationDistance: 5,
    transparent: true
    // normalMap: texture,  // try commenting this out first
    // normalScale: [0.05, 0.05],
  }

  const group = useRef()
  const { nodes, materials } = useGLTF(filePath)

  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])
  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])
  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])
  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])

  // Rotate mesh every frame, this is outside of React without overhead
  // useFrame(() => {
  //   if (group.current != null) {
  //     group.current.rotation.y = group.current.rotation.y += 0.003
  //   }
  // })

  return (
    <group ref={group} {...props} dispose={null}>
        {/*<Box/>*/}
      <group position={[0, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_1.geometry}
          material={materials.Mat1}
        >
        </mesh>
        <lineSegments geometry={edges}>
          <lineBasicMaterial color="black" />
        </lineSegments>
        <lineSegments geometry={edges1}>
          <lineBasicMaterial color="black" />
        </lineSegments>
        <lineSegments geometry={edges2}>
          <lineBasicMaterial color="black"  />
        </lineSegments>
        <lineSegments geometry={edges3}>
          <lineBasicMaterial color="black" />
        </lineSegments>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_2.geometry}
          material={materials.Mat2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_3.geometry}
          material={materials.Mat3}
        >
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_3.geometry}
          material={materials.Mat3}
        >
          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_4.geometry}
          material={materials.Mat4}
        >

        </mesh>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials['Material.001']}
        position={[0, 0, 0.03]}
      >
        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />
      </mesh>
    </group>
  )
}

useGLTF.preload(filePath)
